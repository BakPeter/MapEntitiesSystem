-Microservices-
Advantages:
Scalability (running several containers of the same image)
Loosly coupled (container can be replaced / changed without changing other components)
Not depended on OS / hardware - only dependent on Docker
Not depended on location (could be on cloud / different locations) 
Highly maintainable and testable.
Technology flexibillity - individual units are fast and easy to deploy.
Reliabillity - changes can be deployed without threat of bringing down the entire application.
Loosly coupled to vendor or technology

Disadvantages
Communication between services is complex
More services equals more resources:
Global testing is difficult
Debugging problems can be harder
Deployment challengers
Large vs small product companies

--SOLID--
S - The single-responsibility principle: every class should have only one responsibility.
O - The openâ€“closed principle: Software entities ... should be open for extension, but closed for modification.
L - The Liskov substitution principle: Functions that use pointers or references to base classes 
    must be able to use objects of derived classes without knowing it.
I - The interface segregation principle: Many client-specific interfaces are better than one general-purpose interface.
D - The dependency inversion principle: "Depend upon abstractions, [not] concretions.


Design Patterns:
Adaper - Message Broker
Dependency Injection - IOC

Services:
MapEntityService:
Clean:
Core, Infrastructure, Web API
S - Each class has its own resposibility
O - Each class is open to extension but closed for modifaction
	For example: MapEntityService IS NOT: --insert explenation: IHandleMapEntityCMD--
L - Not relevante in current case
I - Implemant seregation by using only the functionality relevant to handle to entity
D - Dependency inversion by depending on abstartion of ILogger, IPublisher, IMapEntityValidationService.


MessageBroker:
Clean:(Publisher)
Core, Infrastructure, Presentation - docker container - RabbitMq offical image
S - Each class has its own resposibility
O - Open closed - using interface implementation of IPublisherAdapter
L - Liskov is not relevant in this class (Publisher)
I- Interface Seregation - IPublisher exposed Publish method
D - Dependency Inversion - Using abstraction of IPublisherAdapter